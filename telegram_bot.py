import logging
import asyncio
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from chat_database import ChatDatabase
from yandex_gpt_summarizer import YandexGPTSummarizer

logger = logging.getLogger(__name__)

class ChatSummarizerBot:
    def __init__(self, token, channel_id):
        self.token = token
        self.channel_id = channel_id
        self.database = ChatDatabase()
        self.summarizer = YandexGPTSummarizer()
        self.app = Application.builder().token(token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.register_handlers()
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("summarize", self.manual_summarize))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.store_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏ —á–∞—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, "
            "–∏ —è –±—É–¥—É —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–¥–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ."
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await update.message.reply_text(
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "/summarize - –°–æ–∑–¥–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –≤—Å–µ–≥–æ —á–∞—Ç–∞\n"
            "/summarize [ID —Ç–µ–º—ã] - –°–æ–∑–¥–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã"
        )

    async def manual_summarize(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏ –≤—Ä—É—á–Ω—É—é –ø–æ –∫–æ–º–∞–Ω–¥–µ"""
        chat_id = update.effective_chat.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        chat_member = await context.bot.get_chat_member(chat_id, update.effective_user.id)
        if chat_member.status not in ["administrator", "creator"]:
            await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏ –≤—Ä—É—á–Ω—É—é.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ ID —Ç–µ–º—ã –≤ –∫–æ–º–∞–Ω–¥–µ
        thread_id = None
        if context.args and len(context.args) > 0:
            try:
                thread_id = int(context.args[0])
                await update.message.reply_text(f"–°–æ–∑–¥–∞—é —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —Ç–µ–º—ã {thread_id}...")
            except ValueError:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ç–µ–º—ã. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /summarize [ID —Ç–µ–º—ã]")
                return
        else:
            await update.message.reply_text("–°–æ–∑–¥–∞—é —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –≤—Å–µ–≥–æ —á–∞—Ç–∞...")

        await self.create_and_send_summary(chat_id, thread_id)

    async def _create_and_send_thread_summary(self, chat_id, chat_title, thread_id, messages, chat_stats):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã

        Args:
            chat_id: ID —á–∞—Ç–∞
            chat_title: –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
            thread_id: ID —Ç–µ–º—ã (None –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–µ —Ç–µ–º)
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            chat_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Ç—É
        """
        if not messages:
            logger.info(f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–º–µ {thread_id} —á–∞—Ç–∞ {chat_title}")
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        thread_name = f"–¢–µ–º–∞ {thread_id}" if thread_id else "–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç"

        # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–º–µ –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ —Ç–µ–∫—Å—Ç –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
        if thread_id:
            first_message = min(messages, key=lambda m: m.date) if messages else None
            if first_message and first_message.text:
                thread_name = first_message.text[:30] + "..." if len(first_message.text) > 30 else first_message.text

        logger.info(f"–°–æ–∑–¥–∞—é —Å–∞–º–º–∞—Ä–∏ –¥–ª—è {thread_name} –≤ —á–∞—Ç–µ '{chat_title}' –Ω–∞ –æ—Å–Ω–æ–≤–µ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")

        # –°–æ–∑–¥–∞–µ–º —Å–∞–º–º–∞—Ä–∏
        summary_text = self.summarizer.create_summary(messages)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if thread_id:
            header = f"üìå *–°–∞–º–º–∞—Ä–∏ —Ç–µ–º—ã: {thread_name}*\n"
            header += f"üìä –ß–∞—Ç: {chat_title}\n"
        else:
            header = f"üìä *–°–∞–º–º–∞—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç–∞: {chat_title}*\n"

        header += f"üóì {datetime.now().strftime('%d.%m.%Y')}\n"
        header += f"üí¨ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if chat_stats:
            header += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {chat_stats.get('active_users', 0)}\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞
            media_count = sum(1 for m in messages if m.has_media)
            if messages:
                media_percent = (media_count / len(messages)) * 100
                header += f"üì∑ –ú–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç: {media_count} ({media_percent:.1f}%)\n"

        header += "\n"

        full_text = f"{header}{summary_text}"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º–º–∞—Ä–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        summary = self.database.store_summary(
            chat_id=chat_id,
            text=summary_text,
            message_count=len(messages)
        )

        # –ü—É–±–ª–∏–∫—É–µ–º —Å–∞–º–º–∞—Ä–∏ –≤ –∫–∞–Ω–∞–ª
        try:
            await self.app.bot.send_message(
                chat_id=self.channel_id,
                text=full_text,
                parse_mode="Markdown",
                disable_web_page_preview=True
            )

            # –û—Ç–º–µ—á–∞–µ–º —Å–∞–º–º–∞—Ä–∏ –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–µ
            if summary:
                self.database.mark_summary_as_published(summary.id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∞–º–º–∞—Ä–∏ –≤ –∫–∞–Ω–∞–ª: {str(e)}")

            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏
            if "message is too long" in str(e).lower():
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞—é –Ω–∞ —á–∞—Å—Ç–∏")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                await self.app.bot.send_message(
                    chat_id=self.channel_id,
                    text=header,
                    parse_mode="Markdown"
                )

                # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
                max_length = 4000
                for i in range(0, len(summary_text), max_length):
                    part = summary_text[i:i+max_length]
                    part_header = f"*–ß–∞—Å—Ç—å {i//max_length + 1}*\n\n" if i > 0 else ""

                    await self.app.bot.send_message(
                        chat_id=self.channel_id,
                        text=f"{part_header}{part}",
                        parse_mode="Markdown",
                        disable_web_page_preview=True
                    )
                    await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏

        # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
        self.database.mark_messages_as_summarized(messages)

        logger.info(f"–°–∞–º–º–∞—Ä–∏ –¥–ª—è {thread_name} –≤ —á–∞—Ç–µ '{chat_title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
    
    async def store_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        message = update.message
        chat_id = update.effective_chat.id
        user = message.from_user

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        self.database.get_or_create_chat(
            chat_id=chat_id,
            title=update.effective_chat.title,
            chat_type=update.effective_chat.type
        )

        self.database.get_or_create_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name,
            is_bot=user.is_bot,
            language_code=user.language_code,
            is_premium=getattr(user, 'is_premium', False)
        )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–º
        text = message.text or ""
        is_question = "?" in text or any(text.lower().startswith(q)
                                     for q in ["–∫—Ç–æ", "—á—Ç–æ", "–≥–¥–µ", "–∫–æ–≥–¥–∞", "–ø–æ—á–µ–º—É", "–∫–∞–∫", "—Å–∫–æ–ª—å–∫–æ"])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
        self.database.store_message(
            message_id=message.message_id,
            chat_id=chat_id,
            user_id=user.id,
            text=text,
            date=message.date,
            is_question=is_question
        )
    
    async def create_and_send_summary(self, chat_id=None, thread_id=None):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å–∞–º–º–∞—Ä–∏ –≤ –∫–∞–Ω–∞–ª

        Args:
            chat_id: ID —á–∞—Ç–∞ (–µ—Å–ª–∏ None, —Ç–æ –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤)
            thread_id: ID —Ç–µ–º—ã (–µ—Å–ª–∏ None, —Ç–æ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–º –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã)
        """
        try:
            # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç, —Å–æ–∑–¥–∞–µ–º —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
            if chat_id:
                chat_ids = [chat_id]
                chats = [self.database.get_or_create_chat(chat_id=chat_id)]
            else:
                # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
                chats = self.database.get_chats_with_enough_messages()
                chat_ids = [chat.chat_id for chat in chats]

            if not chat_ids:
                logger.info("–ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏")
                return

            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –≤–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if len(chat_ids) > 1:
                intro_text = f"üìã *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏ –ø–æ {len(chat_ids)} —á–∞—Ç–∞–º*\n\n"
                await self.app.bot.send_message(
                    chat_id=self.channel_id,
                    text=intro_text,
                    parse_mode="Markdown"
                )

            for i, chat in enumerate(chats):
                chat_id = chat.chat_id
                chat_title = chat.title or f"–ß–∞—Ç {chat_id}"

                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —á–∞—Ç—É
                chat_stats = self.database.get_chat_statistics(chat_id, days=1)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —á–∞—Ç–µ —Ç–µ–º—ã —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
                threads = self.database.get_chat_threads(chat_id)

                # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π thread_id, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
                if thread_id is not None:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º—ã
                    messages = self.database.get_messages_for_last_day(chat_id, thread_id=thread_id)
                    if messages:
                        await self._create_and_send_thread_summary(chat_id, chat_title, thread_id, messages, chat_stats)
                    else:
                        logger.info(f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–º–µ {thread_id} —á–∞—Ç–∞ {chat_title}")
                    continue

                # –ï—Å–ª–∏ –≤ —á–∞—Ç–µ –µ—Å—Ç—å —Ç–µ–º—ã, —Å–æ–∑–¥–∞–µ–º —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã –æ—Ç–¥–µ–ª—å–Ω–æ
                if threads:
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(threads)} —Ç–µ–º –≤ —á–∞—Ç–µ {chat_title}")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–º —á–∞—Ç–∞
                    thread_intro = f"üìã *–°–∞–º–º–∞—Ä–∏ –ø–æ —Ç–µ–º–∞–º —á–∞—Ç–∞: {chat_title}*\n"
                    thread_intro += f"üóì {datetime.now().strftime('%d.%m.%Y')}\n"
                    thread_intro += f"üìå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–º: {len(threads)}\n\n"

                    await self.app.bot.send_message(
                        chat_id=self.channel_id,
                        text=thread_intro,
                        parse_mode="Markdown"
                    )

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ç–µ–º—É –æ—Ç–¥–µ–ª—å–Ω–æ
                    for thread_id, message_count in threads:
                        messages = self.database.get_messages_for_last_day(chat_id, thread_id=thread_id)
                        await self._create_and_send_thread_summary(chat_id, chat_title, thread_id, messages, chat_stats)
                        await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏

                    # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –æ–±—â–µ–µ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–µ —Ç–µ–º
                    messages_no_thread = self.database.get_messages_for_last_day(chat_id, thread_id=None)
                    if messages_no_thread:
                        await self._create_and_send_thread_summary(chat_id, chat_title, None, messages_no_thread, chat_stats)
                else:
                    # –ï—Å–ª–∏ —Ç–µ–º –Ω–µ—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ –≤–º–µ—Å—Ç–µ
                    messages = self.database.get_messages_for_last_day(chat_id)

                    if not messages:
                        logger.info(f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –≤ —á–∞—Ç–µ {chat_title}")
                        continue

                    logger.info(f"–°–æ–∑–¥–∞—é —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —á–∞—Ç–∞ '{chat_title}' –Ω–∞ –æ—Å–Ω–æ–≤–µ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")

                    # –°–æ–∑–¥–∞–µ–º —Å–∞–º–º–∞—Ä–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                    summary_text = self.summarizer.create_summary(messages)

                    # –î–æ–±–∞–≤–ª—è–µ–º —á–µ—Ç–∫—É—é –æ—Ç–º–µ—Ç–∫—É, –∏–∑ –∫–∞–∫–æ–≥–æ —á–∞—Ç–∞ —ç—Ç–æ —Å–∞–º–º–∞—Ä–∏
                    header = f"üìä *–°–∞–º–º–∞—Ä–∏ —á–∞—Ç–∞: {chat_title}*\n"
                    header += f"üóì {datetime.now().strftime('%d.%m.%Y')}\n"
                    header += f"üí¨ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}\n"

                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    if chat_stats:
                        header += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {chat_stats.get('active_users', 0)}\n"

                        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞
                        media_percent = 0
                        if chat_stats.get('total_messages', 0) > 0:
                            media_percent = (chat_stats.get('media_messages', 0) / chat_stats.get('total_messages', 0)) * 100
                        header += f"üì∑ –ú–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç: {chat_stats.get('media_messages', 0)} ({media_percent:.1f}%)\n"

                    header += "\n"

                    full_text = f"{header}{summary_text}"

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º–º–∞—Ä–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    summary = self.database.store_summary(
                        chat_id=chat_id,
                        text=summary_text,
                        message_count=len(messages)
                    )

                # –ü—É–±–ª–∏–∫—É–µ–º —Å–∞–º–º–∞—Ä–∏ –≤ –∫–∞–Ω–∞–ª —Å —á–µ—Ç–∫–∏–º –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ–º —á–∞—Ç–∞
                try:
                    await self.app.bot.send_message(
                        chat_id=self.channel_id,
                        text=full_text,
                        parse_mode="Markdown",
                        disable_web_page_preview=True
                    )

                    # –û—Ç–º–µ—á–∞–µ–º —Å–∞–º–º–∞—Ä–∏ –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–µ
                    if summary:
                        self.database.mark_summary_as_published(summary.id)

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∞–º–º–∞—Ä–∏ –≤ –∫–∞–Ω–∞–ª: {str(e)}")

                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏
                    if "message is too long" in str(e).lower():
                        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞—é –Ω–∞ —á–∞—Å—Ç–∏")

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                        await self.app.bot.send_message(
                            chat_id=self.channel_id,
                            text=header,
                            parse_mode="Markdown"
                        )

                        # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
                        max_length = 4000
                        for i in range(0, len(summary_text), max_length):
                            part = summary_text[i:i+max_length]
                            part_header = f"*–ß–∞—Å—Ç—å {i//max_length + 1}*\n\n" if i > 0 else ""

                            await self.app.bot.send_message(
                                chat_id=self.channel_id,
                                text=f"{part_header}{part}",
                                parse_mode="Markdown",
                                disable_web_page_preview=True
                            )
                            await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏

                # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                self.database.mark_messages_as_summarized(messages)

                logger.info(f"–°–∞–º–º–∞—Ä–∏ –¥–ª—è —á–∞—Ç–∞ '{chat_title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")

                # –ï—Å–ª–∏ —Å–∞–º–º–∞—Ä–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                if i < len(chats) - 1:
                    await asyncio.sleep(1)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∞–º–º–∞—Ä–∏: {str(e)}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.app.run_polling()
