import logging
import json
import requests
import time
from collections import Counter
import re
from config import YANDEX_GPT_API_KEY, YANDEX_GPT_API_URL, YANDEX_GPT_MODEL, RETRY_ATTEMPTS, RETRY_DELAY

logger = logging.getLogger(__name__)

class YandexGPTSummarizer:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Yandex GPT"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è summarizer"""
        # –°–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–µ–¥—É–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ
        self.stop_words = {"–∏", "–≤", "–Ω–∞", "—Å", "–ø–æ", "–∫", "—É", "–∑–∞", "–∏–∑", "–æ", "—á—Ç–æ", "–∫–∞–∫", "–∞", "—Ç–æ", 
                           "—Ç–∞–∫", "–Ω–æ", "–Ω–µ", "–¥–∞", "–¥–ª—è", "—ç—Ç–æ—Ç", "–≤–æ—Ç", "–æ—Ç", "–±—ã–ª", "–±—ã"}
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Yandex GPT
        self.headers = {
            "Content-Type": "application/json",
            "Authorization": f"Api-Key {YANDEX_GPT_API_KEY}"
        }
    
    def prepare_messages_for_gpt(self, messages):
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Yandex GPT
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            str: –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞
        chat_ids = set(message.chat_id for message in messages)
        if len(chat_ids) > 1:
            logger.warning(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö —á–∞—Ç–æ–≤! {chat_ids}")
        
        prepared_text = []
        for message in messages:
            name = message.first_name
            if message.last_name:
                name += f" {message.last_name}"
            
            # –§–æ—Ä–º–∞—Ç: [–í—Ä–µ–º—è] –ò–º—è: –¢–µ–∫—Å—Ç
            time_str = message.date.strftime("%H:%M:%S")
            prepared_text.append(f"[{time_str}] {name}: {message.text}")
        
        return "\n".join(prepared_text)
    
    def call_yandex_gpt(self, prompt):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Yandex GPT API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏

        Args:
            prompt: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞

        Returns:
            str: –û—Ç–≤–µ—Ç –æ—Ç API
        """
        for attempt in range(RETRY_ATTEMPTS):
            try:
                payload = {
                    "model": YANDEX_GPT_MODEL,
                    "messages": [
                        {
                            "role": "system",
                            "text": "–¢—ã - –∞–Ω–∞–ª–∏—Ç–∏–∫ —á–∞—Ç–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞. –í–∫–ª—é—á–∏ –≤ —Å–∞–º–º–∞—Ä–∏: 1) –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è, 2) –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã –∏–ª–∏ —Ä–µ—à–µ–Ω–∏—è, 3) –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏—Å–∫—É—Å—Å–∏–∏. –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ Markdown."
                        },
                        {
                            "role": "user",
                            "text": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –∏ —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏:\n\n{prompt}"
                        }
                    ],
                    "temperature": 0.7,
                    "max_tokens": 800
                }

                response = requests.post(YANDEX_GPT_API_URL, headers=self.headers, json=payload, timeout=30)
                response.raise_for_status()

                result = response.json()
                if "result" in result and "alternatives" in result["result"] and len(result["result"]["alternatives"]) > 0:
                    return result["result"]["alternatives"][0]["message"]["text"]
                else:
                    logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Yandex GPT: {result}")

                    if attempt < RETRY_ATTEMPTS - 1:
                        logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{RETRY_ATTEMPTS} —á–µ—Ä–µ–∑ {RETRY_DELAY} —Å–µ–∫—É–Ω–¥...")
                        time.sleep(RETRY_DELAY)
                    else:
                        return None
            except requests.exceptions.RequestException as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Yandex GPT API (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{RETRY_ATTEMPTS}): {str(e)}")

                if attempt < RETRY_ATTEMPTS - 1:
                    logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {RETRY_DELAY} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(RETRY_DELAY)
                else:
                    return None
            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Yandex GPT API: {str(e)}")
                return None

        return None
    
    def create_summary(self, messages):
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–∞–º–º–∞—Ä–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É—è Yandex GPT

        Args:
            messages: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π

        Returns:
            str: –¢–µ–∫—Å—Ç —Å–∞–º–º–∞—Ä–∏
        """
        if not messages:
            return "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."

        message_count = len(messages)

        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        basic_stats = self.create_basic_stats(messages)

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Yandex GPT
        prepared_messages = self.prepare_messages_for_gpt(messages)

        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–º–∞—Ä–∏ –æ—Ç Yandex GPT
        gpt_summary = self.call_yandex_gpt(prepared_messages)

        if gpt_summary:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —Å–∞–º–º–∞—Ä–∏ –æ—Ç GPT
            full_summary = f"{basic_stats}\n\n*–ê–Ω–∞–ª–∏–∑ Yandex GPT:*\n{gpt_summary}"
            return full_summary
        else:
            # –ï—Å–ª–∏ GPT –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º–º–∞—Ä–∏ –æ—Ç Yandex GPT, –∏—Å–ø–æ–ª—å–∑—É—é —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥")
            return self.create_fallback_summary(messages, basic_stats)
    
    def create_basic_stats(self, messages):
        """
        –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            str: –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        """
        if not messages:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —á–∞—Å–∞–º
        hour_counts = Counter()
        for message in messages:
            hour_counts[message.date.hour] += 1

        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Å
        most_active_hour = max(hour_counts.items(), key=lambda x: x[1])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = "*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:*\n"
        stats += f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}\n"
        stats += f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π: {len(set(m.id for m in messages))}\n"
        stats += f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {sum(1 for m in messages if m.is_question)}\n"
        stats += f"üì∑ –ú–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π: {sum(1 for m in messages if m.has_media)}\n"
        stats += f"\n*–°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Å:* {most_active_hour[0]}:00 ({most_active_hour[1]} —Å–æ–æ–±—â–µ–Ω–∏–π)"
        
        return stats
    
    def create_fallback_summary(self, messages, basic_stats):
        """
        –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏, –µ—Å–ª–∏ Yandex GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
            basic_stats: –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            
        Returns:
            str: –¢–µ–∫—Å—Ç —Å–∞–º–º–∞—Ä–∏
        """
        # –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        all_text = " ".join([message.text for message in messages]).lower()
        words = re.findall(r'\b[–∞-—è—ëa-z]{4,}\b', all_text)
        words = [word for word in words if word not in self.stop_words]
        
        word_counter = Counter(words)
        top_words = word_counter.most_common(10)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∫ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
        summary = f"{basic_stats}\n\n"
        
        summary += "*–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è:*\n"
        if top_words:
            for word, count in top_words:
                summary += f"‚Ä¢ {word} ({count})\n"
        else:
            summary += "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
        
        return summary
